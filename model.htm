
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - collada - blender</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				color: #fff;
				position: absolute;
				top: 10px;
				width: 100%;
				text-align: center;
				z-index: 100;
				display:block;

			}

			a { color: red }
		</style>
	</head>
	<body>

		<script src="js/three2.js"></script>

		<script>

			var container, stats;

			var camera, scene, renderer, objects;
			var particleLight, pointLight;
			var dae, skin;

			var clock = new THREE.Clock();
			var morphs = [];
			var morph;

			// Collada model
				init();
				animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.set( 2, 4, 5 );

				scene = new THREE.Scene();
				//scene.fog = new THREE.FogExp2( 0x000000, 0.035 );

				// Add Blender exported Collada model

				var loader = new THREE.GeometryLoader();
				loader.addEventListener( 'load', function ( event ) {

					var geometry = event.content;

					// adjust color a bit

					var material = geometry.materials[ 0 ];
					material.morphTargets = true;
					material.color.setHex( 0xffffff );
					material.ambient.setHex( 0x666666 );

					// var faceMaterial = new THREE.MeshFaceMaterial();
					// // var faceMaterial = new THREE.MeshPhongMaterial();
					// faceMaterial.morphTargets = true;

					//for ( var i = 0; i < 729; i ++ ) {

						// random placement in a grid

						var x = 0;//( ( i % 27 )  - 13.5 ) * 2 + THREE.Math.randFloatSpread( 1 );
						var z = 0;//( Math.floor( i / 27 ) - 13.5 ) * 2 + THREE.Math.randFloatSpread( 1 );

						// leave space for big monster

						//if ( Math.abs( x ) < 2 && Math.abs( z ) < 2 ) continue;

						morph = new THREE.MorphAnimMesh( geometry, material );

						// one second duration

						morph.duration = 1000;

						// random animation offset

						morph.time = 1000 * Math.random();

						var s = 2;//THREE.Math.randFloat( 0.75, 1 );
						//var s = 0.001;
						morph.scale.set( s, s, s );

						morph.position.set( x, 0, z );
						morph.rotation.y = 0;//THREE.Math.randFloat( -0.25, 0.25 );

						morph.matrixAutoUpdate = false;
						morph.updateMatrix();

						scene.add( morph );

						//morphs.push( morph );

					//}

				} );
				loader.load( 'mdl/female.js' );
				//loader.load( 'models/animated/monster/monster.js' );


				// Lights

				scene.add( new THREE.AmbientLight( 0xffffff ) );

				pointLight = new THREE.PointLight( 0xffffff, 1, 30 );
				pointLight.position.set( 2, 4, 1 );
				scene.add( pointLight );

				// Renderer

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				// Events

				window.addEventListener( 'resize', onWindowResize, false );

			}

			//

			function onWindowResize( event ) {

				renderer.setSize( window.innerWidth, window.innerHeight );

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

			}

			//

			var t = 0;
			function animate() {

				requestAnimationFrame( animate );

				// animate morphs

				var delta = clock.getDelta();

				morph.updateAnimation( 100 * delta );

				document.title = morph.time;

				render();

			}

			function render() {

				var timer = Date.now() * 0.0001;
				//var timer = 0;

				camera.position.x = Math.cos( timer ) * 10;
				camera.position.y = 4;
				camera.position.z = Math.sin( timer ) * 10;

				camera.lookAt( scene.position );

				renderer.render( scene, camera );

			}

		</script>
	</body>
</html>
